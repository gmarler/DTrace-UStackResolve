#!/usr/perl5/5.22.0/bin/perl

use strict;
use warnings;
use v5.22;

# VERSION

use DTrace::UStackResolve;
use Getopt::Long;

my ($execname, $output_dir, @pids, $pids_aref, $dtrace_type,
    $preserve_tempfiles, %x_options, $no_direct_lookups,
    $no_annotations, $lookup_type, $runtime,
    $help, $ctor_args);

GetOptions(
           # execname not currently supported
           #"execname=s", \$execname,
           "output_dir=s",       \$output_dir,
           "pids=s",             \@pids,
           "dtrace_type=s",      \$dtrace_type,
           "preserve_tempfiles", \$preserve_tempfiles,
           "x=s",                \%x_options,
           "no_annotations",     \$no_annotations,
           "no_direct_lookups",  \$no_direct_lookups,
           "lookup_type=s",      \$lookup_type,
           "runtime=s",          \$runtime,
           "h|help",             \$help,
       )
         or die("Error in command line arguments");

# PODNAME: dtrace_ustack

my $usage = q'
Usage:
    dtrace_ustack [OPTIONS] --pids PID1,PID2,...

Description:
    Allows a set of canned DTrace profiles that generate user stacks, which
    would normally abort for binaries with large function symbol counts; think
    hundreds of thousands to millions of functions.

Options:
    --output_dir=<DIR>    - Directory to place all output files generated, like
                            the resolved user stack output.
    --dtrace_type=<type>  - The type of DTrace profile to perform.  At present,
                            the following are supported:
                            - profile (the default): on-CPU stack profiles
                            - off-cpu              : off-CPU stack profiles
                            - whatfor              : More detailed off-CPU
                                                     stack profiles
                            - wakeup_chain         : (EXPERIMENTAL)
                                                     shows off-cpu chain of
                                                     sleepers/wakers
    --preserve_tempfiles  - Keep any temporary/intermediate files generated
                            Used for debugging purposes.
    -x <option>=<val>     - Passed through to DTrace, just like those passed
                            handled by dtrace(1M).
                            Currently supported:
                            - bufsize
                            - aggsize
                            - aggrate
                            - cleanrate
                            - switchrate
                            - dynvarsize
    --no_annotations      - Normally, if a symbol cannot be resolved, the
                            reason why is annotated on the same line.  This
                            makes it difficult to coalesce the stacks for
                            later visualization, so this option exists.
    --no_direct_lookups   - Disables an extra optimization of keeping a small
                            cache of the most common lookups, so the line can be
                            directly looked up in a hash.
                            Default: (0 | false)
    --lookup_type=<X>     - Choose the lookup type.
                            Options: RBTree BinarySearch
                            Default: RBTree
    --runtime=<time>      - Allows specifying how long the DTrace script should
                            run before it exits.
                            Default: 1hour
';

if (defined($help)) {
  say $usage;
  exit(0);
}

if (defined($execname)) {
  $ctor_args->{execname} = $execname;
} elsif (scalar(@pids)) {
  $pids_aref = [ split(/,/, join(',',@pids)) ];
  say "PIDS PROVIDED: " . join (',', @$pids_aref);
  $ctor_args->{pids}      = $pids_aref;
}

unless (exists($ctor_args->{pids})) {
  say $usage;
  exit(1);
}

if (defined($no_annotations)) {
  $ctor_args->{no_annotations} = 1;
}

if (defined($no_direct_lookups)) {
  $ctor_args->{do_direct_lookups} = 0;
} else {
  # Not really needed - it defaults to 1 anyway...
  $ctor_args->{do_direct_lookups} = 1;
}

if (defined($lookup_type)) {
  $ctor_args->{lookup_type} = $lookup_type;
}

if (defined($output_dir)) {
  $ctor_args->{output_dir} = $output_dir;
}

if (defined($dtrace_type)) {
  $ctor_args->{dtrace_type} = $dtrace_type;
}

if (defined($preserve_tempfiles)) {
  $ctor_args->{preserve_tempfiles} = $preserve_tempfiles;
}

if (defined($runtime)) {
  $ctor_args->{runtime} = $runtime;
}

foreach my $key (keys %x_options) {
  $ctor_args->{$key} = $x_options{$key};
}


my $dtus = DTrace::UStackResolve->new(
  $ctor_args
);

my $loop = $dtus->loop;

$loop->run();


